Jalilov 
Initialized empty Git repository in C:/Users/ca.r214.15/Desktop/test111/.git/

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (master)
$ git add .

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (master)
$ git commit -m "1.txt"
[master (root-commit) 9e80933] 1.txt
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 1.txt

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (master)
$ git branch dev

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (master)
$ git checkout dev
Switched to branch 'dev'

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (dev)
$ touch 2.txt

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (dev)
$ touch 3.txt

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (dev)
$ git commit -m "2.txt"
On branch dev
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        2.txt
        3.txt

nothing added to commit but untracked files present (use "git add" to track)

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (dev)
$ git init
Reinitialized existing Git repository in C:/Users/ca.r214.15/Desktop/test111/.git/

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (dev)
$ git add .

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (dev)
$ git commit -m "2.txt 3.txt added"
[dev 8061239] 2.txt 3.txt added
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 2.txt
 create mode 100644 3.txt

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (dev)
$ git checkout master
Switched to branch 'master'

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (master)
$ git merge dev
Updating 9e80933..8061239
Fast-forward
 2.txt | 0
 3.txt | 0
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 2.txt
 create mode 100644 3.txt

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (master)
$ git push -u origin master
fatal: 'origin' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

ca.r214.15@CA-R214-PC15 MINGW64 ~/Desktop/test111 (master)
$
ghjj
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Newtonsoft.Json;

public class Book
{
    public string Id { get; set; }
    public string Name { get; set; }
    public string Author { get; set; }
    public int Year { get; set; }
}

public class DbStore
{
    private List<Book> ReadFromDb()
    {
        if (File.Exists("Files/books.json"))
        {
            string json = File.ReadAllText("Files/books.json");
            return JsonConvert.DeserializeObject<List<Book>>(json);
        }
        return new List<Book>();
    }

    private void WriteToDb(List<Book> books)
    {
        string json = JsonConvert.SerializeObject(books, Formatting.Indented);
        File.WriteAllText("Files/books.json", json);
    }

    public void Add(Book book)
    {
        List<Book> books = ReadFromDb();
        book.Id = Guid.NewGuid().ToString();
        books.Add(book);
        WriteToDb(books);
    }

    public void AddRange(List<Book> books)
    {
        List<Book> existingBooks = ReadFromDb();
        foreach (var book in books)
        {
            book.Id = Guid.NewGuid().ToString();
            existingBooks.Add(book);
        }
        WriteToDb(existingBooks);
    }

    public void Remove(string id)
    {
        List<Book> books = ReadFromDb();
        Book bookToRemove = books.FirstOrDefault(b => b.Id == id);
        if (bookToRemove != null)
        {
            books.Remove(bookToRemove);
            WriteToDb(books);
        }
    }

    public void Update(string id, Book updatedBook)
    {
        List<Book> books = ReadFromDb();
        Book bookToUpdate = books.FirstOrDefault(b => b.Id == id);
        if (bookToUpdate != null)
        {
            bookToUpdate.Name = updatedBook.Name;
            bookToUpdate.Author = updatedBook.Author;
            bookToUpdate.Year = updatedBook.Year;
            WriteToDb(books);
        }
    }

    public Book ShowBook(string id)
    {
        List<Book> books = ReadFromDb();
        return books.FirstOrDefault(b => b.Id == id);
    }

    public List<Book> ShowAllBooks()
    {
        return ReadFromDb();
    }
}
